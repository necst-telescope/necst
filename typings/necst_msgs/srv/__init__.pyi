# flake8: noqa

import typing

class AuthoritySrv:
    class Request:
        SLOT_TYPES: typing.Tuple
        def __init__(self, requester: str = str(), remove: bool = bool()) -> None: ...
        @classmethod
        def get_fields_and_field_types(cls) -> typing.Dict[str, str]: ...
        @property
        def requester(self) -> str: ...
        @requester.setter
        def requester(self) -> None: ...
        @property
        def remove(self) -> bool: ...
        @remove.setter
        def remove(self) -> None: ...

    class Response:
        SLOT_TYPES: typing.Tuple
        def __init__(self, privilege: bool = bool()) -> None: ...
        @classmethod
        def get_fields_and_field_types(cls) -> typing.Dict[str, str]: ...
        @property
        def privilege(self) -> bool: ...
        @privilege.setter
        def privilege(self) -> None: ...

class FileSrv:
    class Request:
        SLOT_TYPES: typing.Tuple
        def __init__(self, data: str = str(), path: str = str()) -> None: ...
        @classmethod
        def get_fields_and_field_types(cls) -> typing.Dict[str, str]: ...
        @property
        def data(self) -> str: ...
        @data.setter
        def data(self) -> None: ...
        @property
        def path(self) -> str: ...
        @path.setter
        def path(self) -> None: ...

    class Response:
        SLOT_TYPES: typing.Tuple
        def __init__(self, success: bool = bool()) -> None: ...
        @classmethod
        def get_fields_and_field_types(cls) -> typing.Dict[str, str]: ...
        @property
        def success(self) -> bool: ...
        @success.setter
        def success(self) -> None: ...

class RecordSrv:
    class Request:
        SLOT_TYPES: typing.Tuple
        def __init__(self, name: str = str(), stop: bool = bool()) -> None: ...
        @classmethod
        def get_fields_and_field_types(cls) -> typing.Dict[str, str]: ...
        @property
        def name(self) -> str: ...
        @name.setter
        def name(self) -> None: ...
        @property
        def stop(self) -> bool: ...
        @stop.setter
        def stop(self) -> None: ...

    class Response:
        SLOT_TYPES: typing.Tuple
        def __init__(self, recording: bool = bool()) -> None: ...
        @classmethod
        def get_fields_and_field_types(cls) -> typing.Dict[str, str]: ...
        @property
        def recording(self) -> bool: ...
        @recording.setter
        def recording(self) -> None: ...
